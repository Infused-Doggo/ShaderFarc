//============================================================================//
//Shader "stage_blinn"
//============================================================================//
// - - - - - - - - - - -
#include "- Shaders/#Include/common.fxh"
#include "- Shaders/#Include/common_scene.fxh"
#include "- Shaders/#Include/common_chara.fxh"
// - - - - - - - - - - -
//  Textures / Samplers  :
//=== Diffuse ===//
#ifdef _Diffuse
	texture2D g_diffuse <string ResourceName = _Diffuse;>;
#else
	texture2D g_diffuse: MATERIALTEXTURE;
#endif
sampler2D g_diffuse_s = sampler_state {
    texture = <g_diffuse>;
    FILTER= ANISOTROPIC;
    AddressU  = WRAP;
    AddressV  = WRAP;
	MAXANISOTROPY = 16;
};
//=== Mask ===//
#ifdef _Mask
	texture2D g_mask <string ResourceName = _Mask;>;
#else
	texture2D g_mask;
#endif
sampler2D g_mask_s = sampler_state {
    texture = <g_mask>;
    FILTER= ANISOTROPIC;
    AddressU  = WRAP;
    AddressV  = WRAP;
	MAXANISOTROPY = 16;
};
//=== Normal ===//
sampler2D g_normal_s = sampler_state {
    texture = <g_normal>;
    FILTER= ANISOTROPIC;
    AddressU  = WRAP;
    AddressV  = WRAP;
	MAXANISOTROPY = 16;
};
//=== Specular ===//
sampler2D g_specular_s = sampler_state {
    texture = <g_specular>;
    FILTER= ANISOTROPIC;
    AddressU  = WRAP;
    AddressV  = WRAP;
	MAXANISOTROPY = 16;
};
//=== Environment ===//
sampler g_envmap_s = sampler_state {
    Texture = <g_envmap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
};
//=== Shadow Depth ===//
texture2D g_shadow_depth1;
sampler2D g_shadow_depth1_s = sampler_state {
    texture = <g_shadow_depth1>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== Shadow 0 ===//
texture2D g_shadow0;
sampler2D g_shadow0_s = sampler_state {
    texture = <g_shadow0>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== Shadow 1 ===//
texture2D g_shadow1;
sampler2D g_shadow1_s = sampler_state {
    texture = <g_shadow1>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== Effect ===//
texture2D g_effect;
sampler2D g_effect_s = sampler_state {
    texture = <g_effect>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//============================================================================//
//  Base Structure  :
struct vs_in
{
	float3 a_position  : POSITION0;
	float3 a_normal    : NORMAL0;  
	float4 a_tangent   : TEXCOORD3;
	float2 a_texcoord0 : TEXCOORD0;
	float2 a_texcoord1 : TEXCOORD1;
};
struct vs_out
{
	float4 position         : SV_POSITION;
	float3 vertcoord        : TEXCOORD0;
	float2 fragcoord        : TEXCOORD1;
	float4 fog_color        : TEXCOORD2; //xyz=fog_color, w=fog
	float2 texcoord         : TEXCOORD3;
	float3 texcoord_shadow0 : TEXCOORD4;
	float3 tangent          : TANGENT0 ;
	float3 binormal         : BINORMAL0;
	float3 normal           : NORMAL0  ;
	float4 eye              : TEXCOORD9; //xyz=eye, w=face_offset
};
//============================================================================//
//  Vertex Shader(s)  :
vs_out vs_model (vs_in i)
{
    vs_out o = (vs_out)0;
// - - - - - - - - - - - - - - - - - - - - //
	float3 a_position  = i.a_position;
	float3 a_normal    = i.a_normal;
	float4 a_tangent   = i.a_tangent;
	float2 a_texcoord  = i.a_texcoord0;
// - - - - - - - - - - - - - - - - - - - - //
	float4 pos_w;
    float3 normal_w;
    float3 tangent_w;
    float4 pos_c;
    float3 normal_v;
	
		float4 pos_m;
        float3 normal_m;
        float3 tangent_m;
        
            pos_m.xyz = a_position;
            pos_m.w = 1.0;
            normal_m = a_normal;
            tangent_m = a_tangent.xyz;

        pos_w.xyz = mul(pos_m, g_worlds);
        pos_w.w = 1.0;
	
        normal_w = mul(normal_m, (float3x3)g_worlds);
        tangent_w = mul(tangent_m.xyz, (float3x3)g_worlds);

        normal_v = mul(normal_w, (float3x3)g_worldview);
        pos_c = mul(pos_m, g_transforms);

    o.position = pos_c;
	
	o.vertcoord = pos_w.xyz;
	
	float2 fragcoord = float2((pos_c.x/pos_c.w + 1.0f) * 0.5f,
    1.0f - (pos_c.y/pos_c.w + 1.0f) * 0.5f);
	o.fragcoord = fragcoord.xy;
	
	o.normal = normal_w;
    if (NORMAL) { // #if NORMAL_DEF
        o.tangent = tangent_w;
        o.binormal = cross(normal_w, tangent_w) * a_tangent.w;
    }
    else { // #else
        o.tangent = (0.0);
        o.binormal = (0.0);
    } // #endif

		float4 texcoord;
		texcoord = float4(a_texcoord, 0.0, 1.0);
    o.texcoord = texcoord * g_texcoord_transforms[0];;

    if (SHADOW) { // #if SHADOW_DEF
        o.texcoord_shadow0 = pos_w * g_self_shadow_receivers[1];
    }
    else { // #else
        o.texcoord_shadow0 = pos_w * g_self_shadow_receivers[0];
    } // #endif

    float4 eye_w;
    eye_w.xyz = g_view_position.xyz - pos_w.xyz;
    o.eye.xyz = eye_w.xyz;

    eye_w.xyz = normalize(eye_w.xyz);

    eye_w.w = dot(eye_w.xyz, normal_w);
    o.normal += eye_w.xyz * eye_w.w * -1.02 * float(eye_w.w < 0.0);

    float2 diff;
    diff.x = pow(clamp(dot(normal_v, float3(0.0, 0.0, 1.0)), 0.0, 1.0), 0.4);
    diff.y = clamp(dot(-eye_w.xyz, g_light_chara_dir.xyz) * 0.5 + 0.5, 0.0, 1.0);
    diff.y *= diff.x;	
    diff.xy *= g_light_face_diff.xy;
    o.eye.w = diff.x + diff.y;

    if (FOG_2) { // #if FOG_2_DEF
        float2 fog;
        fog.x = tex2Dlod(g_effect_s, float4(pos_w.xz * float2(0.0625, -0.0625) + 0.5, 0, 0)).x * 3.0 + 1.0;
        fog.y = clamp((pos_w.y + g_fog_height_params.y) * g_fog_height_params.w + 1.0, 0.0, 1.0);
        o.fog_color.w = (1.0 - pow(fog.y, fog.x)) * g_fog_height_params.x;
        o.fog_color.rgb = g_fog_height_color.rgb;
    }
    else if (FOG_1) { // #elif FOG_1_DEF
        o.fog_color.w = clamp((pos_c.z - g_fog_state_params.y)
            * g_fog_state_params.w, 0.0, 1.0) * g_fog_state_params.x;
        o.fog_color.rgb = g_fog_depth_color.rgb;
    }
    else { // #else
        o.fog_color = (0.0);
    } // #endif
	return o;
}
//============================================================================//
// Fragment Shader(s) :
float4 ps_model(vs_out i) : COLOR0
{
	float4x4 Frame = CTF(i.vertcoord, float4(i.normal, 0), float4(i.texcoord, 0, 1));
	float4 frg_fog_color = i.fog_color; //xyz=fog_color, w=fog
	float2 frg_texcoord = i.texcoord;
	float3 frg_texcoord_shadow0 = i.texcoord_shadow0;
	float3 frg_tangent = Frame[0].xyz;
	float3 frg_binormal = Frame[1].xyz;
	float3 frg_normal = Frame[2].xyz;
	float4 frg_eye = i.eye; //xyz=eye, w=face_offset
//============================================================================//
	gl_FragCoord.xy = i.fragcoord;
	float4 result;
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //
    float4 tmp;
    float3 normal;
    if (NORMAL) { // #if NORMAL_DEF
        tmp = tex2D(g_normal_s, frg_texcoord.xy);
        tmp.xy = tmp.wy * 2.0 - 1.0;
        tmp.zw = tmp.xy * tmp.xy * tmp.xy;
        tmp *= float4(1.5, 1.5, 2.0, 2.0);
        tmp.xy += tmp.w;

        normal = frg_normal.xyz;
        normal += frg_tangent * tmp.x;
        normal += frg_binormal * tmp.y;
        normal = normalize(normal);
    }
    else { // #else
        normal = normalize(frg_normal.xyz);
    } // #endif

    float3 eye_w = normalize(frg_eye);
    float3 reflect_vec = -reflect(eye_w, normal);

    float4 diff = (1.0);
    float4 spec = (1.0);

    if (LIGHT0) { // #if LIGHT0_DEF
        float4 shadow = get_stage_shadow(g_shadow0_s, g_shadow1_s, g_shadow_depth1_s,
            frg_texcoord_shadow0, frg_texcoord_shadow1, LIGHT1); // LIGHT1_DEF);
        diff *= shadow * g_shadow_ambient1 + g_shadow_ambient;
        spec.x *= shadow.x;
    } // #endif

    float4 lc;
    lc.y = diff.x;
    lc.z = spec.x;

    float3 shadow_diff = (0);
    if (U12) { // #if U12_DEF
        shadow_diff = diff.rgb;
    } // #endif

    float3 half_w = normalize(g_light_stage_dir.xyz + eye_w);
    lc.x = clamp(dot(normal, g_light_stage_dir.xyz), 0.0, 1.0);
    lc.w = clamp(dot(normal, half_w), 0.0, 1.0);
    lc.w = pow(lc.w, g_material_state_shininess.x * 112.0 + 16.0);

    tmp.xyz = normal;
    tmp.w = 1.0;
    diff.r = dot(tmp, tmp * g_irradiance_r_transforms);
    diff.g = dot(tmp, tmp * g_irradiance_g_transforms);
    diff.b = dot(tmp, tmp * g_irradiance_b_transforms);
    diff.a = frg_color.a;

    diff.rgb += g_light_stage_diff.rgb * lc.x;
    diff.rgb *= frg_color.rgb;
    diff.rgb += g_material_state_emission.rgb;

    float4 col0;
    if (TEXTURE_COUNT_2) { // #if TEXTURE_COUNT_2_DEF
        col0 = tex2D(g_diffuse_s, frg_texcoord.xy);
        tmp = tex2D(g_mask_s, frg_texcoord.zw);

        bool4 cc = g_texture_blend.xxxx == float4(0.0, 1.0, 2.0, 3.0);
        col0.rgb = lerp(col0.rgb, lerp(col0.rgb, tmp.rgb, tmp.a), float(cc.x));
        col0 = lerp(col0, col0 * tmp, float(cc.y));
        col0.rgb = lerp(col0.rgb, col0.rgb + tmp.rgb, float(cc.z));
        col0.a = lerp(col0.a, col0.a * tmp.a , float(cc.z));
        col0.rgb = lerp(col0.rgb, col0.rgb * 1.0 / (tmp.a + 0.004) * tmp.rgb, float(cc.w));
    }
    else if (TEXTURE_COUNT_1) { // #elif TEXTURE_COUNT_1_DEF
        col0 = tex2D(g_diffuse_s, frg_texcoord.xy);
    }
    else { // #else
        col0 = g_material_state_diffuse;
    } // #endif
    diff *= col0;

    if (U12) { // #if U12_DEF
        diff.rgb *= shadow_diff;
    }
    else { // #else
        diff.rgb *= lc.y;
    } // #endif

    spec = g_light_env_stage_specular * lc.z;
    spec.rgb *= g_light_stage_spec.rgb * lc.w;

    float4 spec_ratio = tex2D(g_specular_s, frg_texcoord.xy) * frg_spec_color;
    diff.rgb *= 0.96;
    diff.rgb += spec_ratio.rgb * spec.rgb;

    if (ENV_MAP) { // #if ENV_MAP_DEF
        float3 env = texCUBE(g_envmap_s, reflect_vec).rgb;
        diff.rgb += env * spec_ratio.a * spec.a;
    } // #endif

    if (FOG_HEIGHT_2 || FOG_HEIGHT_3) { // #if FOG_HEIGHT_2_DEF || FOG_HEIGHT_3_DEF
        result.rgb = lerp(diff.rgb, g_fog_height_color.rgb, frg_normal.w);
    }
    else if (FOG_HEIGHT_1) { // #elif FOG_HEIGHT_1_DEF
        result.rgb = lerp(diff.rgb, g_fog_depth_color.rgb, frg_normal.w);
    }
    else { // #else
        result.rgb = diff.rgb;
    } // #endif

    #if ALPHA_TEST_DEF
        if (diff.a < min(g_max_alpha.z, 0.5))
            discard;

        result.a = g_max_alpha.z < 0.5 ? max(diff.a, g_max_alpha.w) : 1.0;
    #else
        result.a = max(diff.a, g_max_alpha.w);
    #endif
	return result * g_material;
}
//============================================================================//
//  Technique(s)  : 
technique MainTecBS0 < string MMDPass = "object_ss"; > {
    pass DrawObject {	
		#if Src_blend == 0
			SRCBLEND = ZERO;
		#elif Src_blend == 1
			SRCBLEND = ONE;
		#elif Src_blend == 2
			SRCBLEND = SRCCOLOR;
		#elif Src_blend == 3
			SRCBLEND = INVSRCCOLOR;
		#elif Src_blend == 4
			SRCBLEND = SRCALPHA;
		#elif Src_blend == 5
			SRCBLEND = INVSRCALPHA;
		#elif Src_blend == 6
			SRCBLEND = DESTALPHA;
		#elif Src_blend == 7
			SRCBLEND = INVDESTALPHA;
		#elif Src_blend == 8
			SRCBLEND = DESTCOLOR;
		#elif Src_blend == 9
			SRCBLEND = INVDESTCOLOR;
		#elif Src_blend == 10
			SRCBLEND = SRCALPHASAT;
		#endif

		#if Dst_blend == 0
			DESTBLEND = ZERO;
		#elif Dst_blend == 1
			DESTBLEND = ONE;
		#elif Dst_blend == 2
			DESTBLEND = SRCCOLOR;
		#elif Dst_blend == 3
			DESTBLEND = INVSRCCOLOR;
		#elif Dst_blend == 4
			DESTBLEND = SRCALPHA;
		#elif Dst_blend == 5
			DESTBLEND = INVSRCALPHA;
		#elif Dst_blend == 6
			DESTBLEND = DESTALPHA;
		#elif Dst_blend == 7
			DESTBLEND = INVDESTALPHA;
		#elif Dst_blend == 8
			DESTBLEND = DESTCOLOR;
		#elif Dst_blend == 9
			DESTBLEND = INVDESTCOLOR;
		#elif Dst_blend == 10
			DESTBLEND = SRCALPHASAT;
		#endif
		
		#if Double_sided == 0
			CULLMODE = CCW;
		#elif Double_sided == 1
			CULLMODE = NONE;
		#endif
		
        VertexShader = compile vs_3_0 vs_model();
        PixelShader  = compile ps_3_0 ps_model();
    }
}

technique MainTec0 < string MMDPass = "object"; > {
    pass DrawObject {	
		#if Src_blend == 0
			SRCBLEND = ZERO;
		#elif Src_blend == 1
			SRCBLEND = ONE;
		#elif Src_blend == 2
			SRCBLEND = SRCCOLOR;
		#elif Src_blend == 3
			SRCBLEND = INVSRCCOLOR;
		#elif Src_blend == 4
			SRCBLEND = SRCALPHA;
		#elif Src_blend == 5
			SRCBLEND = INVSRCALPHA;
		#elif Src_blend == 6
			SRCBLEND = DESTALPHA;
		#elif Src_blend == 7
			SRCBLEND = INVDESTALPHA;
		#elif Src_blend == 8
			SRCBLEND = DESTCOLOR;
		#elif Src_blend == 9
			SRCBLEND = INVDESTCOLOR;
		#elif Src_blend == 10
			SRCBLEND = SRCALPHASAT;
		#endif

		#if Dst_blend == 0
			DESTBLEND = ZERO;
		#elif Dst_blend == 1
			DESTBLEND = ONE;
		#elif Dst_blend == 2
			DESTBLEND = SRCCOLOR;
		#elif Dst_blend == 3
			DESTBLEND = INVSRCCOLOR;
		#elif Dst_blend == 4
			DESTBLEND = SRCALPHA;
		#elif Dst_blend == 5
			DESTBLEND = INVSRCALPHA;
		#elif Dst_blend == 6
			DESTBLEND = DESTALPHA;
		#elif Dst_blend == 7
			DESTBLEND = INVDESTALPHA;
		#elif Dst_blend == 8
			DESTBLEND = DESTCOLOR;
		#elif Dst_blend == 9
			DESTBLEND = INVDESTCOLOR;
		#elif Dst_blend == 10
			DESTBLEND = SRCALPHASAT;
		#endif
		
		#if Double_sided == 0
			CULLMODE = CCW;
		#elif Double_sided == 1
			CULLMODE = NONE;
		#endif
		
        VertexShader = compile vs_3_0 vs_model();
        PixelShader  = compile ps_3_0 ps_model();
    }
}