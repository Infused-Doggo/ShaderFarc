//============================================================================//
//Shader "glass_eye"
//============================================================================//
// - - - - - - - - - - -
#include "- Shaders/#Include/common.fxh"
#include "- Shaders/#Include/common_scene.fxh"
#include "- Shaders/#Include/common_chara.fxh"
// - - - - - - - - - - -
//  Textures / Samplers  :
//=== Diffuse ===//
texture2D g_diffuse: MATERIALTEXTURE;
sampler2D g_diffuse_s = sampler_state {
    texture = <g_diffuse>;
    MINFILTER = ANISOTROPIC;
    MAGFILTER = ANISOTROPIC;
    MIPFILTER = ANISOTROPIC;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
	MAXANISOTROPY = 16;
};
//=== Specular ===//
texture2D g_specular <string ResourceName = _Specular;>;
sampler2D g_specular_s = sampler_state {
    texture = <g_specular>;
    MINFILTER = ANISOTROPIC;
    MAGFILTER = ANISOTROPIC;
    MIPFILTER = ANISOTROPIC;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
	MAXANISOTROPY = 16;
};
//=== Environment ===//
textureCUBE g_envmap <string ResourceName = _Env_Map;>;
sampler g_envmap_s = sampler_state {
    Texture = <g_envmap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== IBL Diffuse ===//
textureCUBE g_ibl_diffuse <string ResourceName = _IBL;
	string Format = "A16B16G16R16F";>;
sampler g_ibl_diffuse_s = sampler_state {
    Texture = <g_ibl_diffuse>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = POINT;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== IBL Specular ===//
textureCUBE g_ibl_specular <string ResourceName = _IBL1;
	string Format = "A16B16G16R16F";>;
sampler g_ibl_specular_s = sampler_state {
    Texture = <g_ibl_specular>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== IBL Specular Shadowed ===//
textureCUBE g_ibl_specular_shadowed <string ResourceName = _IBL3;
	string Format = "A16B16G16R16F";>;
sampler g_ibl_specular_shadowed_s = sampler_state {
    Texture = <g_ibl_specular_shadowed>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== SSS ===//
shared texture2D g_sss : RENDERCOLORTARGET <
	string Format = "A16B16G16R16F";>;
sampler g_sss_s = sampler_state {
    Texture = <g_sss>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = POINT;
	ADDRESSU  = CLAMP;
	ADDRESSV  = CLAMP;
	ADDRESSW  = CLAMP;
};
//=== Shadow Depth ===//
texture2D g_shadow_depth0;
sampler2D g_shadow_depth0_s = sampler_state {
    texture = <g_shadow_depth0>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = POINT;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//=== Effect ===//
texture2D g_effect;
sampler2D g_effect_s = sampler_state {
    texture = <g_effect>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
};
//============================================================================//
//  Base Structure  :
struct vs_in
{
	float3 a_position : POSITION0;
	float3 a_normal   : NORMAL0;  
	float2 a_texcoord : TEXCOORD0;
};
struct vs_out
{
	float4 position         : SV_POSITION;
	float3 vertcoord        : TEXCOORD8;
	float2 fragcoord        : TEXCOORD9;
	float4 fog_color        : TEXCOORD3; //xyz=fog_color, w=fog
	float4 texcoord         : TEXCOORD0; //xy=texcoord0, zw=texcoord1
	float3 texcoord_shadow0 : TEXCOORD1;
	float4 cornea_coord     : TEXCOORD4; //xy=cornea_coord, zw=model_pos
	float3 normal_spec      : TEXCOORD5;
	float3 normal_diff      : TEXCOORD6;
	float4 eye              : TEXCOORD2; //xyz=eye, w=face_offset
};
//============================================================================//
//  Vertex Shader(s)  :
vs_out vs_model (vs_in i)
{
    vs_out o = (vs_out)0;
// - - - - - - - - - - - - - - - - - - - - //
	float3 a_position  = i.a_position;
	float3 a_normal    = inv(i.a_normal);
	float2 a_texcoord  = i.a_texcoord + float2(0, Eyeball_Offset ? 1.0f : 0.0f);
// - - - - - - - - - - - - - - - - - - - - //
    float4 pos_w;
    float3 normal_w;
    float4 pos_c;
    float3 normal_v;
    #if BONE_MAT_DEF
        ivec4 mtxidx = max(ivec4(0.0), a_matrix_index);
        vec4 weight = mix(vec4(0.0), a_weight, greaterThanEqual(a_matrix_index, ivec4(0.0)));

        pos_w = apply_skinning(a_position, mtxidx, weight);
        normal_w = apply_skinning_rotation(a_normal, mtxidx, weight);

        normal_v = normal_w * mat3(g_worldview);
        pos_c = pos_w * g_transforms;
    #else
        pos_w.xyz = mul(float4(a_position, 1.0), (float4x4)g_worlds).xyz;
        pos_w.w = 1.0;
        normal_w = mul(a_normal, (float3x3)g_worlds);

        normal_v = mul(normal_w, (float3x3)g_worldview);
        pos_c = mul(float4(a_position, 1.0), g_transforms);
    #endif

    o.position = pos_c;
	
	o.vertcoord = pos_w.xyz;
	
	float2 fragcoord = float2((pos_c.x/pos_c.w + 1.0f) * 0.5f,
    1.0f - (pos_c.y/pos_c.w + 1.0f) * 0.5f);
	o.fragcoord = fragcoord.xy;
	
    o.normal_diff = normal_w;

    float2 tex_eb = a_texcoord + g_tex_offset.xy;
    o.texcoord.xy = tex_eb;
    o.texcoord.zw = a_texcoord + g_tex_offset.zw + normal_v.xy * float2(0.01, 0.06);

    if (SHADOW) { // #if SHADOW_DEF
        o.texcoord_shadow0 = pos_w * g_self_shadow_receivers[1];
    }
    else { // #else
        o.texcoord_shadow0 = pos_w * g_self_shadow_receivers[0];
    } // #endif

    float2 pos_m = tex_eb * float2(-1.0, 1.0) + float2(1.0, 0.0);
    pos_m -= g_tex_model_param.zw;
    pos_m *= g_tex_model_param.xy;
    o.cornea_coord.xy = pos_m;
    o.cornea_coord.zw = pos_m * g_ellipsoid_scale.xy;

    float3 pos_eb;
    pos_eb.xy = tex_eb * float2(-1.0, 1.0) + float2(1.0, 0.0);
    pos_eb.xy -= g_eb_tex_model_param.zw;
    pos_eb.xy *= g_eb_tex_model_param.xy;
    float eb = dot(pos_eb.xy * g_eb_radius.xy, pos_eb.xy) * -g_eb_radius.w + g_eb_radius.w;
    pos_eb.z = lerp(0.0, eb * rsqrt(eb), eb > 1e-06);

    o.normal_spec = mul(normalize(pos_eb * 2.0 * g_eb_radius.xyz), (float3x3)g_worlds);

    float3 eye_w = inv(g_view_position.xyz - pos_w.xyz);
    o.eye.xyz = eye_w;

    eye_w = normalize(eye_w);

    float2 diff;
    diff.x = pow(clamp(dot(normal_v, float3(0.0, 0.0, 1.0)), 0.0, 1.0), 0.4);
    diff.y = clamp(dot(-eye_w, g_light_chara_dir.xyz) * 0.5 + 0.5, 0.0, 1.0);
    diff.y *= diff.x;
    diff.xy *= g_light_face_diff.xy;
    o.eye.w = diff.x + diff.y;

    if (FOG_2) { // #if FOG_2_DEF
        float2 fog;
        fog.x = tex2D(g_effect_s, pos_w.xz * float2(0.0625, -0.0625) + 0.5).x * 3.0 + 1.0;
        fog.y = clamp((pos_w.y + g_fog_height_params.y) * g_fog_height_params.w + 1.0, 0.0, 1.0);
        o.fog_color.w = (1.0 - pow(fog.y, fog.x)) * g_fog_height_params.x;
    }
    else if (FOG_1) { // #elif FOG_1_DEF
        o.fog_color.w = clamp((pos_c.z - g_fog_state_params.y)
            * g_fog_state_params.w, 0.0, 1.0) * g_fog_state_params.x;
    }
    else { // #else
        o.fog_color.w = 0.0;
    } // #endif
	return o;
}
//============================================================================//
// Fragment Shader(s) :
float4 ps_model(vs_out i) : COLOR0
{
	float4 frg_fog_color = i.fog_color; //xyz=fog_color, w=fog
	float4 frg_texcoord = i.texcoord; //xy=texcoord0, zw=texcoord1
	float3 frg_texcoord_shadow0 = i.texcoord_shadow0;
	float4 frg_cornea_coord = i.cornea_coord; //xy=cornea_coord, zw=model_pos
	float3 frg_normal_spec = i.normal_spec;
	float3 frg_normal_diff = i.normal_diff;
	float4 frg_eye = i.eye; //xyz=eye, w=face_offset
//============================================================================//
	gl_FragCoord.xy = i.fragcoord;
	float4 result;
	
	g_joint = (EyeJointController);
	g_joint_inverse = inverse(EyeJointController);
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //
	result = float4(1.0, 0.0, 0.0, 1.0);

    float3 eye = normalize(frg_eye.xyz);

    float lc;
    if (SELF_SHADOW) { // #if SELF_SHADOW_DEF
        lc = get_chara_shadow(g_shadow_depth0_s, frg_normal_diff, frg_texcoord_shadow0).y;
    }
    else { // #else
        lc = 1.0;
    } // #endif

    if (dot(frg_cornea_coord.xy, frg_cornea_coord.xy) > 0.96) {
        float3 nrm_cornea1 = normalize(frg_normal_diff);

        float3 rot_ray = mul(nrm_cornea1, (float3x3)g_normal_tangent_transforms);
        float3 diff = get_ibl_diffuse(g_ibl_diffuse_s, rot_ray, lc);

        diff *= g_light_env_chara_diffuse.rgb;
        diff += frg_eye.w;
        diff += g_light_env_chara_ambient.rgb;

        if (TONE_CURVE) { // #if TONE_CURVE_DEF
            diff += get_tone_curve(nrm_cornea1);
        } // #endif

        float3 col2 = tex2D(g_specular_s, frg_texcoord.zw).aaa;
        col2 *= 0.9;
        col2 *= diff;

        //#if SKINNING_DEF
            float2 dev_pos = gl_FragCoord.xy * g_framebuffer_size.xy;
			float3 sss;
			if(SF_Valid){
				sss = tex2D(g_sss_s, dev_pos).rgb;}
			else {
				sss = 1;}
            diff = lerp(diff, sss, g_sss_param.x);
        //#endif

        diff *= tex2D(g_diffuse_s, frg_texcoord.xy).rgb;

        float3 ray = mul(-reflect(eye, frg_normal_spec), (float3x3)g_normal_tangent_transforms);

        float3 ibl_spec = texCUBE(g_ibl_specular_s, ray).rgb;
        float3 ibl_spec_shad = texCUBE(g_ibl_specular_shadowed_s, ray).rgb;

        ibl_spec = lerp(ibl_spec_shad, ibl_spec, lc);
        ibl_spec *= g_light_env_chara_specular.rgb * 0.34;

        diff = lerp(ibl_spec, diff, 0.94);
        diff += col2;

        if (CHARA_COLOR) { // #if CHARA_COLOR_DEF
            result.rgb = apply_chara_color(diff);
        } // #endif
        else { // #else
            result.rgb = apply_fog_color(diff, frg_fog_color);
        } // #endif
        return result * g_material;
    }

    float4 pos_cornea1 = float4(frg_cornea_coord.zw, 0.0, 1.0)* float4(1, -1, 1, 1);

    float3 tmp;
    tmp.xy = pos_cornea1.xy * g_ellipsoid_radius.xy;
    tmp.z = g_ellipsoid_radius.w - dot(tmp.xy, pos_cornea1.xy) * g_ellipsoid_radius.w;
    pos_cornea1.z = tmp.z > 1e-06 ? tmp.z * rsqrt(tmp.z) : pos_cornea1.z;

    float3 nrm_cornea1 = normalize(pos_cornea1.xyz * g_ellipsoid_radius.xyz * 2.0);
    nrm_cornea1 = mul(nrm_cornea1 * float3(-1, -1, 1), (float3x3)g_joint);
	nrm_cornea1 = reflect(reflect(nrm_cornea1, float3(-1, 0, 0)), float3(0, -1, 0));

    float2 cosine;
    cosine.x = clamp(dot(eye, nrm_cornea1), 0.0, 1.0);
    cosine.y = cosine.x * cosine.x * g_refract1.x + g_refract1.y;
    cosine.y = cosine.y >= 1e-06 ? (cosine.y * rsqrt(cosine.y)) :  1.0;

    float3 rot_ray = mul(-reflect(eye, nrm_cornea1), (float3x3)g_normal_tangent_transforms);

    float4 spec1;
    spec1.rgb = texCUBE(g_envmap_s, rot_ray).rgb;
    spec1.rgb = max(spec1.rgb * spec1.rgb * 7.0 - 0.5, (0.0));
    spec1.rgb *= g_light_env_chara_specular.rgb;
    spec1.a = clamp(1.0 - cosine.x, 0.0, 1.0);
    spec1.a = pow(spec1.a, 5.0) * g_fresnel.x + g_fresnel.y;
    spec1.a = min(spec1.a, g_material_state_specular.a * 2.0);

    float3 ray = nrm_cornea1 * (cosine.x * g_refract1.z - cosine.y);
    ray = mul((ray - eye * g_refract1.z) * float3(-1, -1, 1), (float3x3)g_joint_inverse);
	ray = reflect(reflect(ray, float3(-1, 0, 0)), float3(0, -1, 0));

    float3 _ftmp0 = ray * g_iris_radius.xyz;
    float3 coef;
    coef.x = dot(_ftmp0, ray);
    coef.y = dot(_ftmp0, pos_cornea1.xyz)* 2.0;
    coef.z = dot(pos_cornea1 * g_iris_radius, pos_cornea1);

    _ftmp0.xy = coef.xy * coef.zy;
    _ftmp0.z = _ftmp0.x * -4.0 + _ftmp0.y;
    tmp.xy = float2(1.0, -1.0) * _ftmp0.z * rsqrt(_ftmp0.z) - coef.y;
    tmp.xy *= 1.0 / coef.x * 0.5;

    if (_ftmp0.z < 1e-06) {
        result = float4(0.0, 0.0, 1.0, 1.0);
        return result * g_material;
    }

    float4 pos_iris = float4(ray * tmp.x, 0.0) + pos_cornea1;
    if (pos_iris.z > 0.0) {
        result = float4(0.0, 1.0, 0.0, 1.0);
        return result * g_material;
    }

    float len = abs(tmp.x);

    tmp.xy = pos_iris.xy * g_tex_scale.xy + (0.5);
    tmp.xy *= float2(-1.0, -1.0);
    tmp.xy += float2(1.0, 0.0);

    float3 col0 = tex2D(g_diffuse_s, tmp.xy).rgb * 0.75;
    float3 col1 = col0;
    pos_cornea1.z = pos_cornea1.z - g_tex_scale.w;

    _ftmp0 = ray * g_pupil_radius.xyz;
    coef.x = dot(_ftmp0, ray);
    coef.y = dot(_ftmp0, pos_cornea1.xyz) * 2.0;
    coef.z = dot(pos_cornea1 * g_pupil_radius, pos_cornea1);

    _ftmp0.xy = coef.xy * coef.zy;
    _ftmp0.z = _ftmp0.x * -4.0 + _ftmp0.y;
    tmp.xy = float2(1.0, -1.0) * _ftmp0.z * rsqrt(_ftmp0.z) - coef.y;
    tmp.xy *= 1.0 / coef.x * 0.5;
    tmp.y = _ftmp0.z < 1e-06 ? 999999.0 : tmp.y;

    float3 nrm_iris;
    float4 spec2 = (0.0);
    float3 spec3 = (0.0);
    if (U18) { // #elif U18_DEF
        if (len > tmp.y) {
            len = tmp.y;

            float4 pos_pupil = float4(ray * tmp.y, 0.0) + pos_cornea1;
            float3 nrm_pupil = normalize(pos_pupil.xyz * g_pupil_radius.xyz * 2.0);

            nrm_iris = nrm_pupil;
            pos_iris = pos_pupil;

            spec2.w = pow(1.0 - clamp(dot(-ray, nrm_pupil), 0.0, 1.0), 5.0) * 0.96 + 0.04;

            col0 *= 0.5;
            col1 = (1.0);
        }
        else {
            nrm_iris = normalize(pos_iris.xyz * g_iris_radius.xyz * -2.0);
            spec2.w = clamp(dot(col1, col1) * 0.2 - 0.02, 0.0, 1.0);
        }
    } // #endif
    else { // #else
        if (len > tmp.y) {
            len = tmp.y;

            float4 pos_pupil = float4(ray * tmp.y, 0.0) + pos_cornea1;
            float3 nrm_pupil = normalize(pos_pupil.xyz * g_pupil_radius.xyz * 2.0);

            rot_ray = mul(reflect(ray, nrm_pupil) * float3(-1, -1, 1), (float3x3)g_joint);
			rot_ray = mul(reflect(reflect(rot_ray, float3(-1, 0, 0)), float3(0, -1, 0)), (float3x3)g_normal_tangent_transforms);

            spec3 = texCUBE(g_ibl_specular_s, rot_ray).rgb;

            spec3 *= col1;
            spec3 *= 0.1;
            spec3 *= g_light_env_chara_specular.rgb;

            col0 *= 0.75;
        }

        nrm_iris = normalize(pos_iris.xyz * g_iris_radius.xyz * -2.0);
        spec2.w = clamp(dot(col1, col1) * 0.2 - 0.02, 0.0, 1.0);
    } // #endif

    rot_ray = mul(nrm_iris * float3(-1, -1, 1), (float3x3)g_joint);
	rot_ray = mul(reflect(reflect(rot_ray, float3(-1, 0, 0)), float3(0, -1, 0)), (float3x3)g_normal_tangent_transforms);

    float3 diff = get_ibl_diffuse(g_ibl_diffuse_s, rot_ray, lc);

    diff *= g_light_env_chara_diffuse.rgb;
    diff += frg_eye.w;
    diff += g_light_env_chara_ambient.rgb;

    if (TONE_CURVE) { // #if TONE_CURVE_DEF
        diff += get_tone_curve(nrm_cornea1);
    } // #endif

    float3 col2 = tex2D(g_specular_s, frg_texcoord.zw).aaa;
    col2 *= 0.9;
    col2 *= diff;

    diff *= 0.95;
    diff *= col0;

    float3 trsmit_coef = g_material_state_diffuse.rgb * -2.0 + 2.0;
    trsmit_coef *= g_tex_scale.z;

    float3 trsmit = exp2(trsmit_coef * -len);

    ray = reflect(ray, nrm_iris);

    coef.x = dot(ray * g_cornea_radius.xyz, ray);
    coef.y = dot(ray * g_cornea_radius.xyz, pos_iris.xyz) * 2.0;
    coef.z = dot(pos_iris * g_cornea_radius, pos_iris);

    _ftmp0.xy = coef.xy * coef.zy;
    _ftmp0.z = _ftmp0.x * -4.0 + _ftmp0.y;
    tmp.xy = float2(1.0, -1.0) * _ftmp0.z * rsqrt(_ftmp0.z) - coef.y;
    tmp.xy *= 1.0 / coef.x * 0.5;

    float4 pos_cornea2 = float4(ray * tmp.x, 0.0) + pos_iris;

    if (_ftmp0.z < 1e-06 || pos_cornea2.z < 0.0) {
        if (CHARA_COLOR) { // #if CHARA_COLOR_DEF
            result.rgb = apply_chara_color(diff);
        } // #endif
        else { // #else
            result.rgb = apply_fog_color(diff, frg_fog_color);
        } // #endif
        return result * g_material;
    }

    len = abs(tmp.x);

    float3 nrm_cornea2 = normalize(pos_cornea2.xyz * g_cornea_radius.xyz * 2.0);

    cosine.x = clamp(dot(-ray, -nrm_cornea2), 0.0, 1.0);
    cosine.y = cosine.x * cosine.x * g_refract2.x + g_refract2.y;

    if (cosine.y < 1e-06) {
        diff *= trsmit;
        diff = lerp(diff, spec1.rgb, spec1.a);
        diff += col2;
        diff *= 0.85;

        if (CHARA_COLOR) { // #if CHARA_COLOR_DEF
            result.rgb = apply_chara_color(diff);
        } // #endif
        else { // #else
            result.rgb = apply_fog_color(diff, frg_fog_color);
        } // #endif
        return result * g_material;
    }

    cosine.y *= rsqrt(cosine.y);

    rot_ray = nrm_cornea2 * (cosine.x * g_refract2.z - cosine.y);
    rot_ray -= ray * g_refract2.z;
    rot_ray = mul(-rot_ray * float3(-1, -1, 1), (float3x3)g_joint);
	rot_ray = mul(reflect(reflect(rot_ray, float3(-1, 0, 0)), float3(0, -1, 0)), (float3x3)g_normal_tangent_transforms);

    float3 ibl_spec = texCUBE(g_ibl_specular_s, rot_ray).rgb;
    float3 ibl_spec_shad = texCUBE(g_ibl_specular_shadowed_s, rot_ray).rgb;
    spec2.rgb = lerp(ibl_spec_shad, ibl_spec, lc);

    spec2.rgb *= spec2.w;
    spec2.rgb *= g_light_env_chara_specular.rgb;
    spec2.rgb *= col1;

    diff += spec2.rgb * exp2(trsmit_coef * -len);

    diff *= trsmit;
    diff = lerp(diff, spec1.rgb, spec1.a);
    diff += col2;
    diff += spec3;

    if (CHARA_COLOR) { // #if CHARA_COLOR_DEF
        result.rgb = apply_chara_color(diff);
    } // #endif
    else { // #else
        result.rgb = apply_fog_color(diff, frg_fog_color);
    } // #endif
	return result * g_material;
}
//============================================================================//
//  Technique(s)  : 
technique DIVA_ss < string MMDPass = "object_ss"; > {
    pass Main {
		#if Src_blend == 0
			SRCBLEND = ZERO;
		#elif Src_blend == 1
			SRCBLEND = ONE;
		#elif Src_blend == 2
			SRCBLEND = SRCCOLOR;
		#elif Src_blend == 3
			SRCBLEND = INVSRCCOLOR;
		#elif Src_blend == 4
			SRCBLEND = SRCALPHA;
		#elif Src_blend == 5
			SRCBLEND = INVSRCALPHA;
		#elif Src_blend == 6
			SRCBLEND = DESTALPHA;
		#elif Src_blend == 7
			SRCBLEND = INVDESTALPHA;
		#elif Src_blend == 8
			SRCBLEND = DESTCOLOR;
		#elif Src_blend == 9
			SRCBLEND = INVDESTCOLOR;
		#elif Src_blend == 10
			SRCBLEND = SRCALPHASAT;
		#endif
		#if Dst_blend == 0
			DESTBLEND = ZERO;
		#elif Dst_blend == 1
			DESTBLEND = ONE;
		#elif Dst_blend == 2
			DESTBLEND = SRCCOLOR;
		#elif Dst_blend == 3
			DESTBLEND = INVSRCCOLOR;
		#elif Dst_blend == 4
			DESTBLEND = SRCALPHA;
		#elif Dst_blend == 5
			DESTBLEND = INVSRCALPHA;
		#elif Dst_blend == 6
			DESTBLEND = DESTALPHA;
		#elif Dst_blend == 7
			DESTBLEND = INVDESTALPHA;
		#elif Dst_blend == 8
			DESTBLEND = DESTCOLOR;
		#elif Dst_blend == 9
			DESTBLEND = INVDESTCOLOR;
		#elif Dst_blend == 10
			DESTBLEND = SRCALPHASAT;
		#endif
		#if Double_sided == 0
			CULLMODE = CCW;
		#elif Double_sided == 1
			CULLMODE = NONE;
		#endif
        VertexShader = compile vs_3_0 vs_model();
		PixelShader  = compile ps_3_0 ps_model();
    }
}
technique DIVA <string MMDPASS = "object"; > {
	pass Main {
        VertexShader = compile vs_3_0 vs_model();
        PixelShader  = compile ps_3_0 ps_model();
    }
}